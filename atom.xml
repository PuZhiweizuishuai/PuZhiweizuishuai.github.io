<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不挂高数</title>
  
  <subtitle>我和清华只差一个成绩优异</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.buguagaoshu.com/"/>
  <updated>2018-06-18T14:17:54.023Z</updated>
  <id>https://www.buguagaoshu.com/</id>
  
  <author>
    <name>史上最帅社会主义接班人</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c#笔记：对象间数据传递</title>
    <link href="https://www.buguagaoshu.com/2018/06/18/c-%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E9%97%B4%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/"/>
    <id>https://www.buguagaoshu.com/2018/06/18/c-笔记：对象间数据传递/</id>
    <published>2018-06-18T13:45:21.000Z</published>
    <updated>2018-06-18T14:17:54.023Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger"><p><strong>C#学习笔记</strong><br><strong>对象间数据的传递和回调</strong><br><strong>以windowsForm程序为例</strong></p></div><a id="more"></a><h2 id="主窗口向从窗口传递数据"><a href="#主窗口向从窗口传递数据" class="headerlink" title="主窗口向从窗口传递数据"></a>主窗口向从窗口传递数据</h2><p>运行示例</p><p><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/c%23/2018/6/18/MainToOther.JPG"></p><h3 id="设置一个公有属性或设置公有方法来实现"><a href="#设置一个公有属性或设置公有方法来实现" class="headerlink" title="设置一个公有属性或设置公有方法来实现"></a>设置一个公有属性或设置公有方法来实现</h3><p>主窗体代码：<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MainToOther</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">FormMain</span> :</span> Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormMain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> FormOther otherForm;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FormMain_Load</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            otherForm = <span class="keyword">new</span> FormOther();</span><br><span class="line">            otherForm.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnSend_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">string</span> userInput = textUserInput.Text.Trim();</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(userInput))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//otherForm.Messige = userInput;</span></span><br><span class="line">                otherForm.ReceiveMessige(userInput);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>从窗体代码</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MainToOther</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">FormOther</span> :</span> Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormOther</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过共有属性，来实现信息的单项传递</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Messige</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">set</span> &#123; libMessage.Text = value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过共有方法，来实现信息的单项传递</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceiveMessige</span><span class="params">(<span class="built_in">string</span> Message)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            libMessage.Text = Message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从窗体向主窗体传送数据"><a href="#从窗体向主窗体传送数据" class="headerlink" title="从窗体向主窗体传送数据"></a>从窗体向主窗体传送数据</h2><p>运行示例</p><p><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/c%23/2018/6/18/OtherToMain1.JPG"><br><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/c%23/2018/6/18/OtherToMain2.JPG"><br><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/c%23/2018/6/18/OtherToMain3.JPG"></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>示例代码</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OtherToMain</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">FormMain</span> :</span> Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormMain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            FormOther OtherForm = <span class="keyword">new</span> FormOther();</span><br><span class="line">            主窗体主动的查询数据</span><br><span class="line">            <span class="keyword">if</span> (OtherForm.ShowDialog() == DialogResult.OK)</span><br><span class="line">                label1.Text = OtherForm.UserInput;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                label1.Text = <span class="string">"用户取消了输入！"</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从窗体<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OtherToMain</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">FormOther</span> :</span> Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormOther</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过公有属性传递数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> UserInput</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; <span class="keyword">return</span> textBox1.Text; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            设置本窗体关闭的原因，以供主窗体查询</span><br><span class="line">            <span class="keyword">this</span>.DialogResult = DialogResult.OK;</span><br><span class="line">            <span class="keyword">this</span>.Close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            设置本窗体关闭的原因，以供主窗体查询</span><br><span class="line">            <span class="keyword">this</span>.DialogResult = DialogResult.Cancel;</span><br><span class="line">            <span class="keyword">this</span>.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法二：使用回调实现"><a href="#方法二：使用回调实现" class="headerlink" title="方法二：使用回调实现"></a>方法二：使用回调实现</h3><p>主窗体<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OtherToMain</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">FormMain</span> :</span> Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormMain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            FormOther OtherForm = <span class="keyword">new</span> FormOther(<span class="keyword">this</span>);</span><br><span class="line">            OtherForm.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从窗体主动的汇报数据,Report方法供从窗体调用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Report</span><span class="params">(<span class="built_in">string</span> Info)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            label1.Text = Info;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>从窗体</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OtherToMain</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">FormOther</span> :</span> Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//用于保存主窗体的引用</span></span><br><span class="line">        <span class="keyword">public</span> FormMain mainForm = null;</span><br><span class="line">        <span class="comment">//将外部的主窗体对象注入进来</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormOther</span><span class="params">(FormMain main)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            mainForm = main;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过公有属性传递数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> UserInput</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; <span class="keyword">return</span> textBox1.Text; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(textBox1.Text.Trim()))</span><br><span class="line">            &#123;</span><br><span class="line">                mainForm.Report(<span class="string">"用户没有输入文本！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mainForm.Report(textBox1.Text);</span><br><span class="line">            &#125;</span><br><span class="line">            Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            mainForm.Report(<span class="string">"用户取消了输入！"</span>);</span><br><span class="line">            Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个关于回调的示例"><a href="#一个关于回调的示例" class="headerlink" title="一个关于回调的示例"></a>一个关于回调的示例</h2><p>运行示例</p><p><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/c%23/2018/6/18/Callback.JPG"></p><p>实现代码<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> CallBackExamlple</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//公有接口</span></span><br><span class="line">    <span class="keyword">public</span> interface ICallBack</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CallBackClass</span> :</span> ICallBack</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//输出当前时间</span></span><br><span class="line">            Console.WriteLine(DateTime.Now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CallBackClass2</span> :</span> ICallBack</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            counter++;</span><br><span class="line">            System.Media.SystemSounds.Asterisk.Play();</span><br><span class="line">            Console.WriteLine(<span class="string">"I am invoked "</span> + counter.ToString() + <span class="string">" times"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">//定义一个对象集合</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;ICallBack&gt; CallBackObjects = <span class="keyword">new</span> List&lt;ICallBack&gt;(); <span class="comment">//回调对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddCallBack</span><span class="params">(ICallBack callBack)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            CallBackObjects.Add(callBack);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"敲任意键回调方法，按ESC键退出..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (Console.ReadKey(<span class="literal">true</span>).Key != ConsoleKey.Escape)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">                foreach(ICallBack obj in CallBackObjects)</span><br><span class="line">                &#123;</span><br><span class="line">                    obj.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//创建控制器对象，将提供给它的回调对象传入</span></span><br><span class="line">            Controller controller = <span class="keyword">new</span> Controller();</span><br><span class="line">            controller.AddCallBack(<span class="keyword">new</span> CallBackClass());</span><br><span class="line">            controller.AddCallBack(<span class="keyword">new</span> CallBackClass2());</span><br><span class="line">            <span class="comment">//如需扩充程序，则只需要做如下操作</span></span><br><span class="line">            <span class="comment">//controller.AddCallBack(new MyCallBackCla())</span></span><br><span class="line">            <span class="comment">//启动控制器对象运行</span></span><br><span class="line">            controller.Begin();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h2><p>运行示例<br><img src="http://7xjjdc.com1.z0.glb.clouddn.com/TwoWayComblog/c%23/2018/6/18/municationInForms.JPG"></p><p>主窗体代码<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> TwoWayCommunicationInForms</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">FormMain</span> :</span> Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormMain</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> FormOther OtherForm;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FormMain_Load</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            OtherForm = <span class="keyword">new</span> FormOther(<span class="keyword">this</span>);</span><br><span class="line">            OtherForm.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将numericUpDown1中数据传送到从窗口中</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Swap</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            OtherForm.Trabsnit = (<span class="keyword">int</span>)numericUpDown1.Value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收FromOther中传回的数据</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Repter</span><span class="params">(<span class="keyword">int</span> Info)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            numericUpDown1.Value = Info;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当numericUpDown1中数字发生改变时执行Swap</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">numericUpDown1_ValueChanged</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Swap();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从窗体</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> TwoWayCommunicationInForms</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">FormOther</span> :</span> Form</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//引用主窗体</span></span><br><span class="line">        <span class="keyword">public</span> FormMain mainForm = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //将外部的主窗体对象注入进来</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormOther</span><span class="params">(FormMain main)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            mainForm = main;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用公有属性来传递数据</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Trabsnit</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                progressBar1.Value = value;</span><br><span class="line">            &#125;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> progressBar1.Value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(progressBar1.Value == <span class="number">100</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                progressBar1.Value = <span class="number">0</span>;</span><br><span class="line">                Trabsnit = progressBar1.Value ;</span><br><span class="line">                mainForm.Repter(Trabsnit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                progressBar1.Value++;</span><br><span class="line">                Trabsnit = progressBar1.Value;</span><br><span class="line">                mainForm.Repter(Trabsnit);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(progressBar1.Value == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                progressBar1.Value = <span class="number">0</span>;</span><br><span class="line">                Trabsnit = progressBar1.Value;</span><br><span class="line">                mainForm.Repter(Trabsnit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                progressBar1.Value--;</span><br><span class="line">                Trabsnit = progressBar1.Value;</span><br><span class="line">                mainForm.Repter(Trabsnit);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;&lt;strong&gt;C#学习笔记&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;对象间数据的传递和回调&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;以windowsForm程序为例&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="C#" scheme="https://www.buguagaoshu.com/categories/C/"/>
    
    
      <category term="学习笔记" scheme="https://www.buguagaoshu.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C#" scheme="https://www.buguagaoshu.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#笔记：委托</title>
    <link href="https://www.buguagaoshu.com/2018/05/31/C-%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A7%94%E6%89%98/"/>
    <id>https://www.buguagaoshu.com/2018/05/31/C-笔记：委托/</id>
    <published>2018-05-31T15:17:27.000Z</published>
    <updated>2018-06-03T05:29:11.585Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><p><strong>C#学习笔记</strong><br><strong>委托的基本知识</strong></p></div><a id="more"></a> <h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托实际上是一种数据类型，我们可以使用它来定义变量。<br>一个委托类型的变量，可以引用任何一个满足其要求的方法（包括静态或实例方法）<br>委托变量有点像时一个方法的“容器”，将某一个具体的方法“装入”之后，这个委托变量就可以当成方法一样调用。</p><p>例：<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathOpt</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (x &gt; y || x == y) ? x : y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个委托方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> delegate <span class="keyword">int</span> <span class="title">MathOptDelegate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MathOptDelegate oppDel;</span><br><span class="line">            <span class="comment">//委托时一种用户自定义的数据类型，可以用于自定义变量</span></span><br><span class="line">            MathOpt obj = <span class="keyword">new</span> MathOpt();</span><br><span class="line">            <span class="comment">//oppDel = obj.Add;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//也可以接收偶一个静态方法的引用</span></span><br><span class="line">            oppDel = MathOpt.Max;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//委托变量可以当成普通方法那样调用</span></span><br><span class="line">            Console.WriteLine(oppDel(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//可以把方法引用直接传给委托类型的参数</span></span><br><span class="line">            Console.WriteLine(UseDelegate(obj.Add,<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">            Console.WriteLine(UseDelegate(MathOpt.Max,<span class="number">100</span>,<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以定义委托类型的参数</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">UseDelegate</span><span class="params">(MathOptDelegate option, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> option(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="组合委托"><a href="#组合委托" class="headerlink" title="组合委托"></a>组合委托</h2><p>委托可以使用额外的运算符来组合，这个运算符会创建一个新的委托。<br>例如<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MathOptDelegate oppDelA = MathOpt.Max;</span><br><span class="line">MathOptDelegate oppDelB = obj.Add;</span><br><span class="line">MathOptDelegate oppDelC = oppDelA + oppDelB;</span><br></pre></td></tr></table></figure></p><p>oppDelC成为一个具有组合调用列表的新委托。</p><h3 id="为委托添加和减去方法"><a href="#为委托添加和减去方法" class="headerlink" title="为委托添加和减去方法"></a>为委托添加和减去方法</h3><p>可以使用+=运算符为委托添加方法</p><p>例：<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MathOptDelegate oppDelA = MathOpt.Max;</span><br><span class="line">oppDelA += obj.Add;           <span class="comment">//添加方法</span></span><br></pre></td></tr></table></figure></p><p>由于委托不可变，使用+=运算符时，实际上是创建了一个新委托</p><p>可以使用-=运算符为委托移除方法<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oppDelA -= obj.Add;     <span class="comment">//移除方法</span></span><br></pre></td></tr></table></figure></p><p>与增加方法一样，其实是创建了一个新委托，新委托是旧委托的副本</p><p>综合举例：</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MulticastDelegatelnvocationList</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义一个委托变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> delegate <span class="keyword">int</span> <span class="title">MyDelegate</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Func1</span><span class="params">(<span class="keyword">int</span> argument)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Func1: i=&#123;0&#125;"</span>,argument);</span><br><span class="line">            <span class="keyword">return</span> argument;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Func2</span><span class="params">(<span class="keyword">int</span> argument)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Func2: i=&#123;0&#125;"</span>, argument*<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> argument*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MyClass obj = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">            MyDelegate del1 = obj.Func1;</span><br><span class="line">            del1 += obj.Func2;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取方法调用列表</span></span><br><span class="line">            Delegate[] ds = del1.GetInvocationList();  <span class="comment">//GetInvocationList()获取方法调用列表</span></span><br><span class="line">            Console.WriteLine(<span class="string">"del1的委托调用列表中包含&#123;0&#125;个方法。"</span>,ds.GetLength(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            del1(<span class="number">5</span>);  <span class="comment">//先调用obj.Func1(),在调用obj.Func2()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            MyDelegate del2 = obj.Func1;</span><br><span class="line">            del2 += obj.Func2;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"del2的委托调用列表中包含&#123;0&#125;个方法。"</span>,del2.GetInvocationList().GetLength(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            del2(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//组合两个委托变量</span></span><br><span class="line">            MyDelegate mul = del1 + del2;</span><br><span class="line">            ds = mul.GetInvocationList();</span><br><span class="line">            Console.WriteLine(<span class="string">"合并del1和del2后，新的委托变量mul的委托调用列表中包含&#123;0&#125;个方法。"</span>,ds.GetLength(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">int</span> ret = mul(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"合并之后，新的委托变量mul的返回值 = &#123;0&#125;"</span>,ret);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//移除方法obj.Func2()</span></span><br><span class="line">            mul -= obj.Func2;</span><br><span class="line">            Console.WriteLine(<span class="string">"移除Func2后，委托变量mul包含&#123;0&#125;个方法。"</span>,mul.GetInvocationList().GetLength(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            ret = mul(<span class="number">10</span>);  <span class="comment">//获取委托调用最后一个方法的返回值</span></span><br><span class="line">            Console.WriteLine(<span class="string">"移除Func2后，返回值 = &#123;0&#125;"</span>,ret);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">del1的委托调用列表中包含2个方法。</span><br><span class="line">Func1: i=5</span><br><span class="line">Func2: i=10</span><br><span class="line">del2的委托调用列表中包含2个方法。</span><br><span class="line">Func1: i=5</span><br><span class="line">Func2: i=10</span><br><span class="line">合并del1和del2后，新的委托变量mul的委托调用列表中包含4个方法。</span><br><span class="line">Func1: i=10</span><br><span class="line">Func2: i=20</span><br><span class="line">Func1: i=10</span><br><span class="line">Func2: i=20</span><br><span class="line">合并之后，新的委托变量mul的返回值 = 20</span><br><span class="line">移除Func2后，委托变量mul包含3个方法。</span><br><span class="line">Func1: i=10</span><br><span class="line">Func2: i=20</span><br><span class="line">Func1: i=10</span><br><span class="line">移除Func2后，返回值 = 10</span><br></pre></td></tr></table></figure></p><p>注：<br><div class="note danger"><p>如果调用列表中的方法有多个实例，-=运算符将从列表最后开始搜索，并移除第一个与方法匹配的实例。<br>试图删除委托中不存在的方法是没有效果的。<br>试图调用空委托会抛出异常，通常与null比较判断是否为空。<br>如果一个方法在调用列表中出现多次，当委托被调用时，每次在列表中遇到这个方法时他都会被调用一次。<br>如果委托有返回值并且在列表中有一个以上的方法，调用列表中最会一个方法返回的值就时委托调用的返回值，其它数值都会被忽略。<br>引用参数值会在调用期间发生改变。</p></div></p><h2 id="另一个例子"><a href="#另一个例子" class="headerlink" title="另一个例子"></a>另一个例子</h2><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> UseTimerCallback</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用于向回调函数提供参数信息</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TaskInfo</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"敲任意键结束……"</span>);</span><br><span class="line">            TaskInfo ti = <span class="keyword">new</span> TaskInfo();</span><br><span class="line">            <span class="comment">//创建Timer对象，将一个回调函数传给它，每隔一秒调用一次</span></span><br><span class="line">            <span class="comment">//把ti这一个参数对象传给Timer </span></span><br><span class="line">            <span class="comment">//再将ShowTime的对象引用传给它</span></span><br><span class="line">            Timer tm = <span class="keyword">new</span> Timer(ShowTime, ti, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            tm.Dispose();      <span class="comment">//回收数据</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//被回调的函数</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTime</span><span class="params">(Object ti)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            TaskInfo obj = ti as TaskInfo;  <span class="comment">//强制类型转换</span></span><br><span class="line">            obj.count++;</span><br><span class="line">            Console.WriteLine(<span class="string">"(&#123;0&#125;)&#123;1&#125;"</span>, obj.count, DateTime.Now);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>Timer构造函数第一个参数TimerCallback，定时引用的函数就是这么一个函数引用的<br><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/c%23/2018/5/31/timer.JPG" alt=".Net基类库Timer"><br>可以看出在.Net基类库中，可以明显看出TimerCallback是一个委托，返回void，接受一个object参数，同样就可以编写一个<br>void ShowTime(Object ti)<br>函数<br><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/c%23/2018/5/31/timer2.JPG" alt="TimerCallback实现"></p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;&lt;strong&gt;C#学习笔记&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;委托的基本知识&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="C#" scheme="https://www.buguagaoshu.com/categories/C/"/>
    
    
      <category term="学习笔记" scheme="https://www.buguagaoshu.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C#" scheme="https://www.buguagaoshu.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C数组和指针</title>
    <link href="https://www.buguagaoshu.com/2018/05/19/C%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/"/>
    <id>https://www.buguagaoshu.com/2018/05/19/C数组和指针/</id>
    <published>2018-05-19T13:59:11.000Z</published>
    <updated>2018-05-20T13:26:42.594Z</updated>
    
    <content type="html"><![CDATA[<div class="note success"><p><strong>摘要</strong><br><strong>数组和指针差别</strong><br><strong>指针的指针</strong><br><strong>指向数组的指针</strong></p></div><a id="more"></a> <blockquote class="blockquote-center">数组和指针并不相同。</blockquote><h2 id="数组和指针的差别"><a href="#数组和指针的差别" class="headerlink" title="数组和指针的差别"></a>数组和指针的差别</h2><table><thead><tr><th>数组</th><th style="text-align:right">指针</th></tr></thead><tbody><tr><td>保存数据</td><td style="text-align:right">保存数据地址</td></tr><tr><td>直接访问数据a[i]只是简单地以a+i为地址取得数据</td><td style="text-align:right">间接访问数据，首先取得指针内容，把它作为地址，然后从这个地址提取数据。如果一个直接下标[i]，就把指针内容加上i作为地址，从中提取数据</td></tr><tr><td>通常用于储存固定数目且数据类型相同的元素</td><td style="text-align:right">通常用于动态结构</td></tr><tr><td>隐式分配和删除</td><td style="text-align:right">相关函数为malloc()，free()</td></tr><tr><td>自身即为数据名</td><td style="text-align:right">通常指向匿名数据</td></tr></tbody></table><p>数组和指针都可以在它们定义中使用字符串常量进行初始化，尽管看上去一样，但是底层机制却不相同<br>定义指针时，编译器并部位指针所指向的对象分配控件，它只是分配指针本身的空间，除非在定义的同时赋值给指针一个字符串常量进行初始化。<br>在ANSI C中，初始化指针所创建的字符串常量通常被定义为只读。</p><h2 id="什么时候数组和指针相同"><a href="#什么时候数组和指针相同" class="headerlink" title="什么时候数组和指针相同"></a>什么时候数组和指针相同</h2><h3 id="规则一：表达式中的数组名就是指针"><a href="#规则一：表达式中的数组名就是指针" class="headerlink" title="规则一：表达式中的数组名就是指针"></a>规则一：表达式中的数组名就是指针</h3><p>例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], *p, i = <span class="number">2</span>;</span><br><span class="line">p = a;</span><br><span class="line">p[i];</span><br></pre></td></tr></table></figure></p><h3 id="规则2：C语言把数组下标作为偏移量"><a href="#规则2：C语言把数组下标作为偏移量" class="headerlink" title="规则2：C语言把数组下标作为偏移量"></a>规则2：C语言把数组下标作为偏移量</h3><p>例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], *p, i = <span class="number">2</span>;</span><br><span class="line">p = a;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    *(p+i) = <span class="number">0</span>;  <span class="comment">//与a[i] = 0;相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>出自：C专家编程P204</strong></p><h3 id="规则三：最为函数参数的数组名等同于指针"><a href="#规则三：最为函数参数的数组名等同于指针" class="headerlink" title="规则三：最为函数参数的数组名等同于指针"></a>规则三：最为函数参数的数组名等同于指针</h3><p>这个比较简单就不多解释了</p><h2 id="指针的指针"><a href="#指针的指针" class="headerlink" title="指针的指针"></a>指针的指针</h2><p>让我们暂时忘掉那些关于指针的各种类比。指针实际上存放的是内存的地址。<br>&amp; 符号的意思是取地址，也就是返回一个对象在内存中的地址。<br><em>符号的意思是取得一个指针所指向的对象。 也就是如果一个指针保存着一个内存地址，那么它就返回在那个地址的对象。<br>所以当你这么写时 </em>ipp = ip2，实际上是把 ipp 存的地址所对应的对象，也就是 ip1 取到，然后把 ip2 存的值赋值给 ip1，也就是 j 的地址。<br>简单点就是：<br>&amp;：取址。<br>*：取值。<br><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/C/2018/5/19/czhizheng1.jpg" alt="指针的指针"></p><h2 id="指向数组的指针"><a href="#指向数组的指针" class="headerlink" title="指向数组的指针"></a>指向数组的指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> (*A)[<span class="number">10</span>];  <span class="comment">//指向一个内含两个char类型的值的数组</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">3</span>][<span class="number">10</span>] = &#123;<span class="string">"qwert"</span>,<span class="string">"terew"</span>,<span class="string">"ytrytr"</span>&#125;;</span><br><span class="line">A = ch;      <span class="comment">//使A指向ch的第一行</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, A);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, A[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, *(A+<span class="number">2</span>));  <span class="comment">//使用指针表示</span></span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qwert</span><br><span class="line">terew</span><br><span class="line">ytrytr</span><br></pre></td></tr></table></figure></p><p><strong>警告</strong><br>如果打算在指针上执行任何指针运算，应避免这种类型的声明<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> (*p)[] = ch;</span><br></pre></td></tr></table></figure></p><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>指针变量和其它变量很相似，你可以声明一个指针数组来取得一个类似二维数组的效果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *A[n]; <span class="comment">//A是一个内含n个指针元素的数组，每个元素都指向char类型的指针</span></span><br></pre></td></tr></table></figure><p>由于[ ] 的优先级高于<em> 所以a先和 [ ]结合，他还是一个数组，数组中的元素才是char </em> ，前面讲到char * 是一个变量，保存的地址</p><p>用于实现多维数组的指针数组有多种名字，如向量，用于激活一个在词法上封闭过程的活动记录，作为一个静态结点后跟一个链表的代替方案<br>下图演示了这种结构</p><p><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/C/2018/5/19zj2.JPG"></p><p>这种数组必须用指向为字符串而分配内存的指针进行初始化，可以在编译时用一个常量初始值，亦可以用以下代码进行初始化<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;i &lt;= <span class="number">4</span>;j++)</span><br><span class="line">    pea[j] = <span class="built_in">malloc</span>(<span class="number">6</span>);</span><br></pre></td></tr></table></figure></p><p>另一种方法是一次性使用malloc()分配整个X*Y个数据的数组<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(row_size*column_size*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br></pre></td></tr></table></figure></p><h3 id="char-A-和char-A区别"><a href="#char-A-和char-A区别" class="headerlink" title="char *A[]和char **A区别"></a>char *A[]和char **A区别</h3><p>在C中，数组和指针通常是可以互换的，但是有一些区别：</p><p>1.用“char * A []”，你不能给A赋值，只能赋A [x];<br>  使用“char ** A”，您可以将值赋给A和A [x]。</p><p>2.用“char <em> A []”，你可以初始化一个数组（例如char </em> A [] = {“foo”，“bar”};）并使用sizeof（A）来获取大小（64位机器，上面的例子给你16，因为它是两个char *的数组;用“char ** A”，sizeof（A）总是返回一个指针的大小（在64位机器上，8）。</p><h2 id="可以写成P-类型的几种定义"><a href="#可以写成P-类型的几种定义" class="headerlink" title="可以写成P[][]类型的几种定义"></a>可以写成P[][]类型的几种定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[<span class="number">23</span>][<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> *p[<span class="number">23</span>];</span><br><span class="line"><span class="keyword">int</span> **p;</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">12</span>]</span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>1.当char []作为函数的参数时, 表示 char <em>. 当作为函数的参数传入时, 实际上是拷贝了数组的第一个元素的地址 .<br>    所以 void test (char a[]) 等同于 void test ( char </em> a )<br>    char x[10] ; 然后调用 test(x) 则等同于把 x 的第一个元素的地址赋予给参数 a .<br>2.char <em> a 和 char a[]<br>相同点 : a都是指针,  指向char类型.<br>不同点 : char a[] 把内容存在stack .<br>              char </em>a 则把指针存在stack，把内容存在constants.<br>3.char <em> a[10] 和 char a[10][20]<br>相同点 : a 都是2级指针, </em>a 表示一级指针, *<em>a 表示内存中存储的内容.<br>不同点 :  char </em> a[10], 数组由char * 类型的指针组成;<br>char a [10][20] 表示一位放10个元素, 二维放20个元素, 值存放地是一块连续的内存区域, 没有指针.</p><p>4.小窍门 :  []和<em>的数量对应, 如 char a[][]的指针层数是2, 相当于char **a; char </em>a[]也是如此, 两层指针. 迷糊的时候数数到底有几个<em>几个[], 就知道什么情况下存储的是内容还是地址了? 如char a[][] 的情况里面: &amp;a, a, </em>a 都是地址, **a 是内容.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><strong>C专家编程</strong></p><p><strong>C和指针（第二版）</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;数组和指针差别&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;指针的指针&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;指向数组的指针&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://www.buguagaoshu.com/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="https://www.buguagaoshu.com/tags/C-C/"/>
    
      <category term="学习笔记" scheme="https://www.buguagaoshu.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数组" scheme="https://www.buguagaoshu.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="指针" scheme="https://www.buguagaoshu.com/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>C#笔记：泛型</title>
    <link href="https://www.buguagaoshu.com/2018/05/17/C-%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B3%9B%E5%9E%8B/"/>
    <id>https://www.buguagaoshu.com/2018/05/17/C-笔记：泛型/</id>
    <published>2018-05-17T13:52:46.000Z</published>
    <updated>2018-05-21T13:23:54.982Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><p><strong>C#学习笔记</strong><br><strong>包含泛型类，泛型方法，扩展方法和泛型类</strong><br><strong>泛型结构，泛型委托，泛型接口</strong><br><strong>主要参考C#图解教程第四版</strong></p></div><a id="more"></a> <h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>1.类型不是对象而是对象模板，泛型类型也不是类型，而是类型的模板。<br>2.C#提供了五种泛型：类，结构，接口，委托和方法<br>3.可以从同一个泛型类型构建出很多不同的类类型，每一个都有独立的类类型，就好像它们都有独立的非泛型类型声明一样</p><h3 id="泛型类举例"><a href="#泛型类举例" class="headerlink" title="泛型类举例"></a>泛型类举例</h3><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Program</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>&lt;T&gt;</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">//声明泛型数组</span></span><br><span class="line">        T[] StackArry;</span><br><span class="line">        <span class="keyword">int</span> StackPointer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为数组添加数据</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//如果StackPointer小于MaxStack</span></span><br><span class="line">            <span class="keyword">if</span>(!IsStackFull)</span><br><span class="line">            &#123;</span><br><span class="line">                StackArry[StackPointer++] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//如果StackPointer&gt;0,返回StackArry[--StackPointer]的值</span></span><br><span class="line">            <span class="keyword">return</span> (!IsStackEmpty)</span><br><span class="line">                ? StackArry[--StackPointer]</span><br><span class="line">                : StackArry[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> MaxStack = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//如果StackPointer &gt;= MaxStack返回真，否则返回假</span></span><br><span class="line">        <span class="keyword">bool</span> IsStackFull &#123; get &#123; <span class="keyword">return</span> StackPointer &gt;= MaxStack; &#125; &#125;</span><br><span class="line">        <span class="comment">//如果return StackPointer &lt;= 0返回真，否则返回假</span></span><br><span class="line">        <span class="keyword">bool</span> IsStackEmpty &#123; get &#123; <span class="keyword">return</span> StackPointer &lt;= <span class="number">0</span>; &#125; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//初始化泛型数组</span></span><br><span class="line">            StackArry = <span class="keyword">new</span> T[MaxStack];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = StackPointer<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"value:&#123;0&#125;    StackPointer=&#123;1&#125;"</span>,StackArry[i],StackPointer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MyStack&lt;<span class="keyword">int</span>&gt; StackInt = <span class="keyword">new</span> MyStack&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            MyStack&lt;<span class="built_in">string</span>&gt; StackString = <span class="keyword">new</span> MyStack&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">            StackInt.Push(<span class="number">3</span>);</span><br><span class="line">            StackInt.Push(<span class="number">5</span>);</span><br><span class="line">            StackInt.Push(<span class="number">7</span>);</span><br><span class="line">            StackInt.Push(<span class="number">9</span>);</span><br><span class="line">            <span class="comment">//Console.WriteLine(StackInt.Pop());</span></span><br><span class="line">            StackInt.Print();</span><br><span class="line"></span><br><span class="line">            StackString.Push(<span class="string">"this is fun"</span>);</span><br><span class="line">            StackString.Push(<span class="string">"hi there"</span>);</span><br><span class="line">            StackString.Print();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">value:9    StackPointer=4</span><br><span class="line">value:7    StackPointer=4</span><br><span class="line">value:5    StackPointer=4</span><br><span class="line">value:3    StackPointer=4</span><br><span class="line">value:hi there    StackPointer=2</span><br><span class="line">value:this is fun    StackPointer=2</span><br></pre></td></tr></table></figure></p><h3 id="泛型与非泛型之间的区别"><a href="#泛型与非泛型之间的区别" class="headerlink" title="泛型与非泛型之间的区别"></a>泛型与非泛型之间的区别</h3><table><thead><tr><th></th><th style="text-align:center">非泛型</th><th style="text-align:right">泛型</th></tr></thead><tbody><tr><td>源代码大小</td><td style="text-align:center">更大：我们需要为每一种类型编写一个新的实现</td><td style="text-align:right">更小：不管构造类型的数量有多少，我们只需要一个实现</td></tr><tr><td>可执行大小</td><td style="text-align:center">无论每一个版本中的栈是否会被使用，都会在编译的版本中出现</td><td style="text-align:right">可执行文件中只会出现有构造类的类型</td></tr><tr><td>写的难易度</td><td style="text-align:center">易于书写，因为更加具体</td><td style="text-align:right">比较难写，更抽象</td></tr><tr><td>维护的难易度</td><td style="text-align:center">更容易出问题，因为所有修改都需要应用到每一个可用类型上</td><td style="text-align:right">易于维护，因为只需要修改一个地方</td></tr></tbody></table><h3 id="类型参数的约束"><a href="#类型参数的约束" class="headerlink" title="类型参数的约束"></a>类型参数的约束</h3><p>所有的C#对象最终都从object类继承，这些保存的项都实现了object类的成员，它包括ToString，Equals及GetType。除了这些他还不知道那些成员可用。</p><p>只要我们的代码不访问它处理的一些类型的对象（或者只要它始终是object类型的成员）， 泛型类就可以处理任何类型。符合约束的类型参数叫做未绑定的类型参数（unbounded type parameter)。然而，如果代码尝试使用其他成员，编译器会产生一个错误消息。</p><p>例如，如下代码声明了一个叫做Simple的类，它有一个叫做LessThan的方法，接受了两个泛类型的变量。LessThan尝试用小于运算符返冋结果。但是由于不是所有的类都实现了小于运算符，也就不能用任何类来代替T,所以编译器会产生一个错误消息</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span>&lt;T&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">LessThan</span><span class="params">(T i1,T i2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i1 &lt; i2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约束where"><a href="#约束where" class="headerlink" title="约束where"></a>约束where</h3><p>要让泛型变的更有用，需要提供额外的信息让编译器知道参数可以接受那些类型。这些额外的信息叫约束。<br>约束使用Where子句列出<br>1.每一个约束的类型参数有自己的where子句<br>2.如果形参有多个约束，他们在where子句中使用逗号分隔</p><p>where子句语法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where TypeParam : constraint,constraint, ……</span><br></pre></td></tr></table></figure></p><p>例如，如下泛型类有三个类型参数，T1时未绑定的，对于T2,只有Customer类型或从Customer继承的类型才能用作类型实参，而对于T3，只有实现IComparablr的接口的类才能用于类型实参<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;T1,T2,T3&gt;</span></span><br><span class="line"><span class="class">    <span class="title">where</span> <span class="title">T2</span>:</span>Customer</span><br><span class="line">    where T3:IComparable</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>约束类型和次序<br>    共有五种类型的约束</p><table><thead><tr><th>约束类型</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td>类名</td><td style="text-align:right">只有这个类型的类或从他继承的类才能作类型实参</td></tr><tr><td>class</td><td style="text-align:right">任何引用类型，包括类，数组，接口，委托都可以用作类型实参</td></tr><tr><td>struct</td><td style="text-align:right">任何值类型都可以作类型实参</td></tr><tr><td>接口名</td><td style="text-align:right">只有这个接口或实现这个接口的类型才能用作类型实参</td></tr><tr><td>new()</td><td style="text-align:right">任何带有无参公共构造函数的类型都可以用作类型实参，这叫做构造函数约束</td></tr></tbody></table><p>where子句可以以任意次序列出。然而，where子句的约束必须有特定的次序<br>最多只能有一个主约束，如果有则必须放在第一位。<br>可以有任意多的接口约束<br>如果存在构造函数约束，则必须放在最后。</p><h3 id="附：几种常用泛型参数约束"><a href="#附：几种常用泛型参数约束" class="headerlink" title="附：几种常用泛型参数约束"></a>附：几种常用泛型参数约束</h3><table><thead><tr><th></th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td>T：struct</td><td style="text-align:right">类型参数必须是值类型。可以指定除以外的任何值 类型。</td></tr><tr><td>T：class</td><td style="text-align:right">类型参数必须是引用类型；这一点也适用于任何类、 接口、委托或数组类型</td></tr><tr><td>T：new()</td><td style="text-align:right">类型参数必须具有无参数的公共构造函数。当与其 他约束一起使用时，new() 约束必须最后指定。</td></tr><tr><td>T：&lt;基类名&gt;</td><td style="text-align:right">类型参数必须是指定的基类或派生自指定的基类.</td></tr><tr><td>T：&lt;接口名称&gt;</td><td style="text-align:right">类型参数必须是指定的接口或实现指定的接口。可 以指定多个接口约束。约束接口也可以是泛型的。</td></tr></tbody></table><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>泛型方法可以声明在泛型类型和非泛型类型及结构和接口中声明</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> PrintData&lt;S,T&gt;(S p,T t)</span><br><span class="line">    where S:Person</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时编译器可以推断我们参数的类型，所以在调用时可以盛烈参数类型<br>如</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> MyInt = <span class="number">5</span>;</span><br><span class="line">MyMethod&lt;<span class="keyword">int</span>&gt;(MyInt);</span><br></pre></td></tr></table></figure><p>改写为</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyMethod(MyInt);</span><br></pre></td></tr></table></figure><h3 id="泛型方法举例"><a href="#泛型方法举例" class="headerlink" title="泛型方法举例"></a>泛型方法举例</h3><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Program</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Simple</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> ReverseAndPrint&lt;T&gt;(T[] arr) <span class="comment">//泛型方法</span></span><br><span class="line">        &#123;</span><br><span class="line">            Array.Reverse(arr);</span><br><span class="line">            foreach(T item in arr)</span><br><span class="line">                Console.WriteLine(<span class="string">"&#123;0&#125; ,"</span>,item.ToString());</span><br><span class="line">            Console.WriteLine(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//创建不同类型</span></span><br><span class="line">            var intArray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span> &#125;;</span><br><span class="line">            var stringArray = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>&#125;;</span><br><span class="line">            var doubleArray = <span class="keyword">new</span> <span class="keyword">double</span>[] &#123; <span class="number">3.1</span>, <span class="number">3.2</span>, <span class="number">3.3</span> &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用方法</span></span><br><span class="line">            Simple.ReverseAndPrint&lt;<span class="keyword">int</span>&gt;(intArray);</span><br><span class="line">            <span class="comment">//推断类型并调用</span></span><br><span class="line">            Simple.ReverseAndPrint(intArray);</span><br><span class="line"></span><br><span class="line">            Simple.ReverseAndPrint&lt;<span class="built_in">string</span>&gt;(stringArray);</span><br><span class="line">            Simple.ReverseAndPrint(stringArray);</span><br><span class="line"></span><br><span class="line">            Simple.ReverseAndPrint&lt;<span class="keyword">double</span>&gt;(doubleArray);</span><br><span class="line">            Simple.ReverseAndPrint(doubleArray);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">11 ,9 ,7 ,5 ,3 ,</span><br><span class="line">3 ,5 ,7 ,9 ,11 ,</span><br><span class="line"></span><br><span class="line">third ,second ,first ,</span><br><span class="line">first ,second ,third ,</span><br><span class="line"></span><br><span class="line">3.3 ,3.2 ,3.1 ,</span><br><span class="line">3.1 ,3.2 ,3.3 ,</span><br></pre></td></tr></table></figure></p><h2 id="扩展方法和泛型类"><a href="#扩展方法和泛型类" class="headerlink" title="扩展方法和泛型类"></a>扩展方法和泛型类</h2><p>扩展方法可以和泛型类结合使用。它允许我们将类中的静态方法关联滴哦不同的泛型类上，还允许我们像调用类构造实例的实例方法一样来调用方法。<br>和非泛型类一样，泛型类的扩展方法：<br><strong>必须声明为static</strong><br><strong>必须是静态类的成员</strong><br><strong>第一个参数类型中必须有关键字this，后面时扩展类型的名字</strong></p><p>如下代码给出了一个叫做Print的扩展方法，扩展了叫做Holder<t>的泛型类</t></p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Program</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendHolder</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">//泛型扩展方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Print&lt;T&gt;(<span class="keyword">this</span> Holder&lt;T&gt; h)</span><br><span class="line">        &#123;</span><br><span class="line">            T[] vals = h.GetValues();</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;,\t&#123;1&#125;,\t&#123;2&#125;"</span>,vals[<span class="number">0</span>],vals[<span class="number">1</span>],vals[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Holder</span>&lt;T&gt;</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        T[] Vals = <span class="keyword">new</span> T[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Holder</span><span class="params">(T v0,T v1,T v2)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Vals[<span class="number">0</span>] = v0;</span><br><span class="line">            Vals[<span class="number">1</span>] = v1;</span><br><span class="line">            Vals[<span class="number">2</span>] = v2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T[] GetValues()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Vals;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            var intHolder = <span class="keyword">new</span> Holder&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">            var stringHolder = <span class="keyword">new</span> Holder&lt;<span class="built_in">string</span>&gt;(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"a3"</span>);</span><br><span class="line">            intHolder.Print();</span><br><span class="line">            stringHolder.Print();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3,      5,      7</span><br><span class="line">a1,     a2,     a3</span><br></pre></td></tr></table></figure><h2 id="泛型结构"><a href="#泛型结构" class="headerlink" title="泛型结构"></a>泛型结构</h2><p>与泛型类相似，泛型结构可以有类型参数和约束。泛型结构的规则和条件与泛型类是一样的<br>例：<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Program</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PieceOfData</span>&lt;T&gt; //泛型结构</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PieceOfData</span><span class="params">(T value)</span> </span>&#123; _data = value; &#125;</span><br><span class="line">        <span class="keyword">private</span> T _data;</span><br><span class="line">        <span class="keyword">public</span> T Data</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; <span class="keyword">return</span> _data; &#125;</span><br><span class="line">            <span class="built_in">set</span> &#123; _data = value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            var intData = <span class="keyword">new</span> PieceOfData&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">            var stringData = <span class="keyword">new</span> PieceOfData&lt;<span class="built_in">string</span>&gt;(<span class="string">"Hi there."</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"intData=&#123;0&#125;"</span>,intData.Data);</span><br><span class="line">            Console.WriteLine(<span class="string">"stringData=&#123;0&#125;"</span>,stringData.Data);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intData=10</span><br><span class="line">stringData=Hi there.</span><br></pre></td></tr></table></figure><h2 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h2><p>泛型委托和非泛型委托非常相似，不过类型参数决定了能接受什么样的方法</p><p>delegate R MyDelegate&lt;T, R&gt;(T value);<br>R:返回类型</p><p>&lt;T,R&gt;：类型参数</p><p>例：<br><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Program</span><br><span class="line">&#123;</span><br><span class="line">    delegate <span class="keyword">void</span> MyDelegate&lt;T&gt;(T value); <span class="comment">//泛型委托</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Simple</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintString</span><span class="params">(<span class="built_in">string</span> s)</span>  <span class="comment">//方法匹配委托</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintUpperString</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>,s.ToUpper());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            var myDel = <span class="keyword">new</span> MyDelegate&lt;<span class="built_in">string</span>&gt;(Simple.PrintString); <span class="comment">//创建委托的实例</span></span><br><span class="line">            myDel += Simple.PrintUpperString;  <span class="comment">//添加方法</span></span><br><span class="line"></span><br><span class="line">            myDel(<span class="string">"Hi There."</span>);            <span class="comment">//调用委托</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi There.</span><br><span class="line">HI THERE.</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型接口允许我们编写参数和接口成员返回类型是反写类型参数的接口。泛型接口声明和非泛型接口差不多<br>与其他泛型相似，实现不同类型参数的泛型接口是不同的接口<br>我们可以在非泛型类型中实现泛型接口<br>例：</p><p>using System;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Text;<br>using System.IO;</p><figure class="highlight c"><figcaption><span>#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Program</span><br><span class="line">&#123;</span><br><span class="line">    interface IMyIfc&lt;T&gt;     <span class="comment">//泛型接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">T <span class="title">ReturnIt</span><span class="params">(T inValue)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> :</span> IMyIfc&lt;<span class="keyword">int</span>&gt;, IMyIfc&lt;<span class="built_in">string</span>&gt; <span class="comment">//非泛型类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ReturnIt</span><span class="params">(<span class="keyword">int</span> inValue)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReturnIt</span><span class="params">(<span class="built_in">string</span> inValue)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Simple trivial = <span class="keyword">new</span> Simple();</span><br><span class="line">            Console.WriteLine(trivial.ReturnIt(<span class="number">5</span>));</span><br><span class="line">            Console.WriteLine(trivial.ReturnIt(<span class="string">"Hi there."</span>));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>泛型接口的实现必须唯一</strong><br><strong>实现泛型类型的接口时，必须保证类型实参组合不会再类型中产生两个重复的接口</strong></p><p>#END</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;&lt;strong&gt;C#学习笔记&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;包含泛型类，泛型方法，扩展方法和泛型类&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;泛型结构，泛型委托，泛型接口&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;主要参考C#图解教程第四版&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="C#" scheme="https://www.buguagaoshu.com/categories/C/"/>
    
    
      <category term="学习笔记" scheme="https://www.buguagaoshu.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C#" scheme="https://www.buguagaoshu.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习笔记2：查询</title>
    <link href="https://www.buguagaoshu.com/2018/05/15/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9A%E6%9F%A5%E8%AF%A2/"/>
    <id>https://www.buguagaoshu.com/2018/05/15/SQL学习笔记2：查询/</id>
    <published>2018-05-15T04:49:39.000Z</published>
    <updated>2018-05-20T13:59:12.879Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><p><strong>本文为SQL学习记录笔记</strong><br><strong>第二篇记录笔记：查询</strong><br><strong>包含SELECT语句，简单查询，连接查询及嵌套查询</strong></p></div><a id="more"></a> <h2 id="SELECT语句基本语法"><a href="#SELECT语句基本语法" class="headerlink" title="SELECT语句基本语法"></a>SELECT语句基本语法</h2><p>SELECT语句在任何一种SQL语言中，都是使用频率最高的语句，它具有强大的查询功能，有的用户甚至只需要熟练掌握SELECT语句的一部分，就可以轻松地利用数据库来完成自己的工作。可以说，SELECT语句是SQL语言的灵魂。SELECT语句的作用是让数据库服务器根据客户端的要求搜寻出用户所需要的信息资料，并按用户规定的格式进行整理后返回给客户端。<br>SELECT语句的基本语法格式如下。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> select_list</span><br><span class="line">[<span class="keyword">INTO</span> new_table]</span><br><span class="line"><span class="keyword">FROM</span> table_source</span><br><span class="line">[<span class="keyword">WHERE</span> search_condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> group_by_expression]</span><br><span class="line">[<span class="keyword">HAVING</span> search_condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> order_expression[<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]]</span><br></pre></td></tr></table></figure></p><p>其中，参数说明如下。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select_list：<span class="comment">--指明要查询的选择列表。列表可以包括若干个列名或表达式，列名或表达式之间用逗号隔开，用来指示应该返回哪些数据。表达式可以是列名、函数或常数的列表。</span></span><br><span class="line">INTO new_table：<span class="comment">--指定用查询的结果创建一个新表。new_table为新表名称。 </span></span><br><span class="line">FROM table_source：<span class="comment">--指定所查询的表或视图的名称。</span></span><br><span class="line">WHERE search_condition：<span class="comment">--指明查询所要满足的条件。</span></span><br><span class="line">GROUP BY group_by_expression：<span class="comment">--根据指定列中的值对结果集进行分组。</span></span><br><span class="line">HAVING search_condition：<span class="comment">--对用FROM、WHERE或GROUP BY子句创建的中间结果集进行行的筛选。它通常与GROUP BY子句一起使用。</span></span><br><span class="line">ORDER BY order_expression [ ASC |DESC]：<span class="comment">--对查询结果集中的行重新排序。ASC和DESC关键字分别用于指定按升序或降序排序。如果省略ASC或DESC，则系统默认为升序。</span></span><br></pre></td></tr></table></figure></p><p>例：如查询学生基本信息，则可用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *          <span class="comment">--使用通配符*查询所有列</span></span><br><span class="line"><span class="keyword">FROM</span> student      <span class="comment">--查询数据来自student表</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;      <span class="comment">--按id数值以升序排列，如需降序则需要输入参数DESC</span></span><br></pre></td></tr></table></figure><h2 id="限制结果"><a href="#限制结果" class="headerlink" title="限制结果"></a>限制结果</h2><p>SELECT 语句返回所有匹配的行。但是，如果你不希望每个值每次都出现，该怎么办呢？</p><p>办法就是使用 DISTINCT 关键字，顾名思义，它指示数据库只返回不同的值</p><p>例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> courseid       <span class="comment">--查询课程，告诉数据库只返回具有唯一性的行数</span></span><br><span class="line"><span class="keyword">FROM</span> course; </span><br></pre></td></tr></table></figure></p><h3 id="限制行数"><a href="#限制行数" class="headerlink" title="限制行数"></a>限制行数</h3><p>在 SQL Server 和 Access 中使用 SELECT 时，可以使用 TOP 关键字来限制<br>最多返回多少行，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">5</span> <span class="keyword">id</span>        <span class="comment">--只检索前五行数据</span></span><br><span class="line"><span class="keyword">FROM</span> students; </span><br></pre></td></tr></table></figure><p>如果你使用 Oracle，需要基于 ROWNUM（行计数器）来计算行，像这样：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> </span><br><span class="line"><span class="keyword">FROM</span> students </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;=<span class="number">5</span>; </span><br></pre></td></tr></table></figure></p><p>如果你使用 MySQL、MariaDB、PostgreSQL 或者 SQLite，需要使用 LIMIT子句，像这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">FROM</span> students </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;             <span class="comment">--返回五行数据</span></span><br></pre></td></tr></table></figure><p>LIMIT 5指示MySQL等 DBMS 返回不超过 5 行的数据。为了得到后面的 5 行数据，需要指定从哪儿开始以及检索的行数，像这样：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">FROM</span> students </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">5</span>;   <span class="comment">--返回五行数据，并从第五行开始</span></span><br></pre></td></tr></table></figure></p><h2 id="对结果排序"><a href="#对结果排序" class="headerlink" title="对结果排序"></a>对结果排序</h2><p>使用ORDER BY子句</p><h3 id="单个列排序"><a href="#单个列排序" class="headerlink" title="单个列排序"></a>单个列排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *          <span class="comment">--使用通配符*查询所有列</span></span><br><span class="line"><span class="keyword">FROM</span> student      <span class="comment">--查询数据来自student表</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;      <span class="comment">--按id数值以升序排列，如需降序则需要输入参数DESC</span></span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *          <span class="comment">--使用通配符*查询所有列</span></span><br><span class="line"><span class="keyword">FROM</span> student      <span class="comment">--查询数据来自student表</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span>;      <span class="comment">--按id数值以降序排列</span></span><br></pre></td></tr></table></figure><p><strong>注意：ORDER BY 子句的位置 在指定一条 ORDER BY 子句时，应该保证它是 SELECT 语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。</strong></p><h3 id="按多个列排序"><a href="#按多个列排序" class="headerlink" title="按多个列排序"></a>按多个列排序</h3><p>要按多个列排序，简单指定列名，列名之间用逗号分开即可（就像选择多个列时那样）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score,<span class="keyword">name</span>;</span><br></pre></td></tr></table></figure><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><h3 id="使用WHERE子句"><a href="#使用WHERE子句" class="headerlink" title="使用WHERE子句"></a>使用WHERE子句</h3><p>例如</p><p>查询所有女生的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sex=<span class="string">'女'</span>;        <span class="comment">--查询所要满足的条件即都为女生</span></span><br></pre></td></tr></table></figure><p>求女生人数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">'女生人数'</span> </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sex=<span class="string">'女'</span>  <span class="comment">--使用COUNT函数返回满足条件列的数目，</span></span><br><span class="line"><span class="comment">--并给改列命名为女生人数</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：WHERE 子句的位置 在同时使用 ORDER BY 和 WHERE 子句时，应该让 ORDER BY 位于WHERE 之后，否则将会产生错误</strong></p><p>查询不是女生的人<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>,sex </span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> sex &lt;&gt; <span class="string">'女'</span>; </span><br></pre></td></tr></table></figure></p><p><strong>注意：是!=还是&lt;&gt;？!=和&lt;&gt;通常可以互换。但是，并非所有 DBMS 都支持这两种不等于操作符。例如，Microsoft Access 支持&lt;&gt;而不支持!=。如果有疑问，请参阅相应的 DBMS 文档。</strong></p><h3 id="IN-操作符"><a href="#IN-操作符" class="headerlink" title="IN 操作符"></a>IN 操作符</h3><p>IN 操作符用来指定条件范围，范围中的每个条件都可以进行匹配。IN 取一组由逗号分隔、括在圆括号中的合法值。</p><p>查询选择了20001和20002两门课程的学生<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> couses <span class="keyword">IN</span> ( <span class="number">20001</span>, <span class="number">20002</span> ) ;</span><br></pre></td></tr></table></figure></p><p>为什么要使用 IN 操作符？其优点如下。<br>1.在有很多合法选项时，IN 操作符的语法更清楚，更直观。<br>2.在与其他 AND 和 OR 操作符组合使用 IN 时，求值顺序更容易管理。<br>3.IN 操作符一般比一组 OR 操作符执行得更快（在上面这个合法选项很少的例子中，你看不出性能差异）。<br>4.IN 的最大优点是可以包含其他 SELECT 语句，能够更动态地建立<br>WHERE 子句。</p><h3 id="NOT-操作符"><a href="#NOT-操作符" class="headerlink" title="NOT 操作符"></a>NOT 操作符</h3><p>WHERE 子句中的 NOT 操作符有且只有一个功能，那就是否定其后所跟的任何条件。因为 NOT 从不单独使用（它总是与其他操作符一起使用），所以它的语法与其他操作符有所不同。NOT 关键字可以用在要过滤的列前，而不仅是在其后。</p><h3 id="LIKE-操作符"><a href="#LIKE-操作符" class="headerlink" title="LIKE 操作符"></a>LIKE 操作符</h3><p>LIKE关键字用于查询与指定的某些字符串表达式模糊匹配的数据行。LIKE后的表达式被定义为字符串，必须用半角单引号括起来，字符串中可以使用以下4种通配符。<br>1.%：可匹配任意类型和长度的字符串。<br>2.<em>（下划线）：可以匹配任何单个字符。<br>3.[]：指定范围或集合中的任何单个字符。<br>4.[^]：不属于指定范围或集合的任何单个字符。<br>例如：LIKE’刘%’匹配以’刘’开始的字符串；LIKE’%技术%’匹配的是前后字符为任意，中间含有“技术”两个字的字符串；LIKE’</em>秀%’匹配的是第二个字符为“秀”的任意字符串；[a-i] 匹配的是a，b，c，d，e，f，g，h，i单个字符；LIKE’m [^w-z]%’匹配的是以字母m开始并且第2个字母不为w，x，y，z的所有字符串。</p><p>例：<br>检索所有姓刘的学生的基本信息。分析：匹配所有姓刘的学生可以表示为：姓名LIKE’刘%’。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> JSJXY</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'刘%'</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p>正如所见，SQL 的通配符很有用。但这种功能是有代价的，即通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时间。这里给出一些使用通配符时要记住的技巧。<br>1.不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。<br>2.在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。<br>3.仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。总之，通配符是一种极其重要和有用的搜索工具，以后我们经常会用到它</p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>联合查询是指将两个或两个以上SELECT语句，用UNION运算符连接起来的查询。联合查询可以将两个或更多查询的结果组合为单个结果集，该结果集包含联合查询中所有查询的全部行。使用UNION组合多个查询的结果时，必须注意：所有查询中的列数和列的顺序必须相同且数据类型必须兼容。</p><p>从成绩表中检索选修了“20001”或则“20002”的学生学号，合并两个查询的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> COURSEID=<span class="string">'20001'</span></span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> COURSEID=<span class="string">'20002'</span></span><br></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接（INNER JOIN）是组合两个表的常用方法，它将两个表中的列进行比较，将两个表中满足连接条件的行组合起来生成第3个表，仅包含那些满足连接条件的数据行。内连接有等值连接、自然连接和不等值连接3种。<br>当连接操作符是“=”时，该连接操作称为等值连接，使用其他运算符的连接运算称为不等值连接。当等值连接中的连接字段相同，并且在SELECT语句的&lt;输出列表&gt;中去除了重复字段时，该连接操作为自然连接。</p><p>查询姓名，课程名和成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STUDENT.ID, <span class="keyword">NAME</span>, COURSENAME, SCORE </span><br><span class="line"><span class="keyword">FROM</span> STUDENT </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> STUDENT.ID=SC.ID                 <span class="comment">--连接条件</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> COURSE <span class="keyword">ON</span> COURSE.COURSEID=SC.COURSEID</span><br></pre></td></tr></table></figure><p>也可使用以下语句完成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,course.coursename,sc.score</span><br><span class="line"><span class="keyword">FROM</span> student,course,sc</span><br><span class="line"><span class="keyword">WHERE</span> student.id=sc.id <span class="keyword">AND</span> course.courseid=sc.courseid</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>在内连接中，只有在两个表中匹配的记录才能在结果集中出现。而外连接（OUTER JOIN）只限制一个表，而对另外一个表不加限制（即所有的行都出现在结果集中）。</p><p>外连接分为左外连接（LEFT [OUTER] JOIN）、右外连接（RIGHT [OUTER] JOIN）和全外连接（FULL [OUTER] JOIN）。括号中为使用FROM子句定义外连接的关键字，使用中可以省略OUTER。</p><h4 id="左外连接（LEFT-OUTER-JOIN）"><a href="#左外连接（LEFT-OUTER-JOIN）" class="headerlink" title="左外连接（LEFT OUTER JOIN）"></a>左外连接（LEFT OUTER JOIN）</h4><p>左外连接对左边的表不加限制。左外连接需要在FROM子句中采用下列语法格式。<br>FROM 左表名 LEFT [OUTER] JOIN 右表名 ON 连接条件<br>查询是否所有的课程都有成绩，包括课程编号，课程名称，学号，成绩。<br>分析：所有的课程信息在课程表中，成绩信息在成绩表中，有关课程的成绩涉及两张表，由于要查询所有的课程信息，所以所有课程的信息都要出现在结果中，采用左外连接，左表为课程信息表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COURSE.COURSEID, COURSENAME, <span class="keyword">ID</span>, SCORE </span><br><span class="line"><span class="keyword">FROM</span> COURSE <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> COURSE.COURSEID =SC.COURSEID</span><br></pre></td></tr></table></figure><h4 id="右外连接（RIGHT-OUTER-JOIN）"><a href="#右外连接（RIGHT-OUTER-JOIN）" class="headerlink" title="右外连接（RIGHT OUTER JOIN）"></a>右外连接（RIGHT OUTER JOIN）</h4><p>右外连接对右边的表不加限制。右外连接需要在FROM子句采用下列语法格式。<br>FROM 左表名 RIGHT [OUTER] JOIN 右表名 ON 连接条件</p><p>使用右外连接查询学生选修课程的信息。<br>分析：本查询涉及学生表和成绩，由于要显示所有学生选课信息，且用右外连接，所以学生表为右表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COURSEID,SCORE,<span class="keyword">NAME</span> </span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> STUDENT</span><br><span class="line"><span class="keyword">ON</span> SC.ID=STUDENT.ID</span><br></pre></td></tr></table></figure><h4 id="全外连接（FULL-OUTER-JOIN）"><a href="#全外连接（FULL-OUTER-JOIN）" class="headerlink" title="全外连接（FULL OUTER JOIN）"></a>全外连接（FULL OUTER JOIN）</h4><p>全外连接对两个表都不加限制，即两个表中所有的行都会出现在结果集中。使用全外连接需要在FROM子句采用下列语法格式。<br>FROM 左表名 FULL [OUTER] JOIN 右表名 ON 连接条件<br>使用全外连接查询每个学生及其选修课程的情况（包括未选课的学生信息以及未被选修的课程信息）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STUDENT.ID,<span class="keyword">NAME</span>,COURSE.COURSEID,COURSENAME,SCORE</span><br><span class="line"><span class="keyword">FROM</span> STUDENT <span class="keyword">FULL</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> STUDENT.ID=SC.ID</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> COURSE <span class="keyword">ON</span> COURSE.COURSEID=SC.COURSEID</span><br></pre></td></tr></table></figure><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>自连接就是一个表与它自身的不同行进行连接。因为表名要在FROM子句中出现两次，所以需要对表指定两个别名，使之在逻辑上成为两张表。<br>查找同名同姓的学生信息。<br>分析：该例是对学生表进行自连接，这里将学生表分别定义别名为A1、A2，将FROM子句写成“FROM STUDENT A1，STUDENT A2”，连接条件为“WHERE A1.NAME=A2.NAME AND A1.ID&lt;&gt;A2.ID”。为做本例题，需要修改STUDENT表中的某条数据，姓名改为一致。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A1.* <span class="keyword">FROM</span> STUDENT A1, STUDENT A2</span><br><span class="line"><span class="keyword">WHERE</span> A1.NAME=A2.NAME <span class="keyword">AND</span> A1.ID&lt;&gt;A2.ID</span><br></pre></td></tr></table></figure><h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h2><p>例：<br>使用子查询求恰好有两门课程不及格的学生学号、姓名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">WHERE</span> score&lt;<span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">having</span> <span class="keyword">count</span>(*)=<span class="number">2</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>例：<br>查询每个学生的平均成绩，显示姓名和平均成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,<span class="keyword">AVG</span>(score) <span class="keyword">AS</span> <span class="string">'平均成绩'</span></span><br><span class="line"><span class="keyword">FROM</span> student,sc</span><br><span class="line"><span class="keyword">WHERE</span> student.id = sc.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.id,<span class="keyword">name</span>  <span class="comment">--先依据id，在根据姓名分组</span></span><br></pre></td></tr></table></figure><p>查询sc表中成绩超过科平均值的学生姓名。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> courseid ,<span class="keyword">AVG</span>(score) <span class="keyword">AS</span> <span class="string">'平均分'</span>        <span class="comment">--查询各科目成绩平均值</span></span><br><span class="line"><span class="keyword">INTO</span> avgsc</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> courseid</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">in</span>                     <span class="comment">--查找满足条件的id</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>                     <span class="comment">--查询单科成绩高于平均分的id</span></span><br><span class="line"><span class="keyword">FROM</span> sc,avgsc</span><br><span class="line"><span class="keyword">WHERE</span> score&gt;平均分 <span class="keyword">and</span> sc.courseid = avgsc.courseid </span><br><span class="line">)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> avgsc                  <span class="comment">--删除临时创建的表</span></span><br></pre></td></tr></table></figure></p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p><a href="http://note.youdao.com/noteshare?id=428669b44b1ac7a5f01c29540c978c74&sub=52FA2A51E8274846A72B68142999903B" target="_blank" rel="noopener"><blockquote class="blockquote-center">例题查看</blockquote></a></p><div class="note primary"><p>参考资料<br>SQL入门经典第五版<br>SQL必知必会</p></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;&lt;strong&gt;本文为SQL学习记录笔记&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;第二篇记录笔记：查询&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;包含SELECT语句，简单查询，连接查询及嵌套查询&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.buguagaoshu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="https://www.buguagaoshu.com/tags/SQL/"/>
    
      <category term="数据库" scheme="https://www.buguagaoshu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习记录1：创建数据库与创建表</title>
    <link href="https://www.buguagaoshu.com/2018/05/14/SQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%88%9B%E5%BB%BA%E8%A1%A8/"/>
    <id>https://www.buguagaoshu.com/2018/05/14/SQL学习记录1：创建数据库与创建表/</id>
    <published>2018-05-14T14:22:58.000Z</published>
    <updated>2018-05-14T15:05:01.778Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjjdc.com1.z0.glb.clouddn.com/blog/sql/network-3396348_1280.gif" alt="数据库1"></p><div class="note class_name"><p><strong>本文为SQL学习记录笔记</strong><br><strong>第一篇记录笔记：创建数据库与创建表</strong></p></div><a id="more"></a> <h2 id="创建数据库的基本语法如下所示："><a href="#创建数据库的基本语法如下所示：" class="headerlink" title="创建数据库的基本语法如下所示："></a>创建数据库的基本语法如下所示：</h2><figure class="highlight sql"><figcaption><span>创建数据库</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> sqlbizhibihui <span class="comment">--创建一个叫sqlbizhibihui的数据库</span></span><br><span class="line"><span class="keyword">ON</span> PRIMARY</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">name</span> = <span class="string">'sqlbizhibihui'</span>, <span class="comment">--主数据文件逻辑名称</span></span><br><span class="line">  filename = <span class="string">'F:\visual studio 2015\sqlbizhibihui\sqlbizhibihui.mdf'</span>, <span class="comment">--主数据文件实际保存路径</span></span><br><span class="line">  <span class="keyword">size</span> = <span class="number">5</span>MB, <span class="comment">--主数据文件初始大小</span></span><br><span class="line">  <span class="keyword">maxsize</span> = <span class="number">150</span>MB, <span class="comment">--最大容量</span></span><br><span class="line">  filegrowth = <span class="number">20</span>% <span class="comment">--以20%扩容</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">LOG</span> <span class="keyword">ON</span> <span class="comment">--配置日志文件选项</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">name</span> = <span class="string">'sqlbizhibihui_log'</span>,<span class="comment">--日志文件逻辑名称</span></span><br><span class="line">  filename = <span class="string">'F:\visual studio 2015\sqlbizhibihui\sqlbizhibihui_log.ldf'</span>,<span class="comment">--日志文件保存地址</span></span><br><span class="line">  <span class="keyword">size</span> = <span class="number">5</span>MB, <span class="comment">--日志文件初始大小</span></span><br><span class="line">  filegrowth = <span class="number">5</span>MB<span class="comment">--超过默认值后再扩容5mb</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建表的基本语法如下所示："><a href="#创建表的基本语法如下所示：" class="headerlink" title="创建表的基本语法如下所示："></a>创建表的基本语法如下所示：</h2><figure class="highlight sql"><figcaption><span>创建表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name <span class="comment">--创建一个名为table_name的表</span></span><br><span class="line">(</span><br><span class="line">field1 data_type1 <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--field1列名 data_type数据类型 not null 不允许空值 </span></span><br><span class="line">field2 data_type2 <span class="keyword">not</span> <span class="literal">null</span>, </span><br><span class="line">field3 data_type3 <span class="keyword">not</span> <span class="literal">null</span>, </span><br><span class="line">field4 data_type4 <span class="keyword">not</span> <span class="literal">null</span>, </span><br><span class="line">field5 data_type5 <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">); </span><br></pre></td></tr></table></figure><h2 id="修改表的基本语法如下所示："><a href="#修改表的基本语法如下所示：" class="headerlink" title="修改表的基本语法如下所示："></a>修改表的基本语法如下所示：</h2><h3 id="1-修改表元素"><a href="#1-修改表元素" class="headerlink" title="1.修改表元素"></a>1.修改表元素</h3><figure class="highlight sql"><figcaption><span>修改表元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> EMPLOYEE_TEL </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> EMP_ID <span class="built_in">VARCHAR</span>(<span class="number">10</span>)      <span class="comment">--修改表EMP_ID数据类型为varchar（10）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--注意SQL server使用ALTER COLUMN,而MySQL和Oracle要使用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> EMPLOYEE_TEL</span><br><span class="line"><span class="keyword">MODIFY</span> EMP_ID <span class="built_in">VARCHAR</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="2-添加列"><a href="#2-添加列" class="headerlink" title="2.添加列"></a>2.添加列</h3><p>所有的 DBMS 都允许给现有的表增加列，不过对所增加列的数据类型<br>（以及 NULL 和 DEFAULT 的使用）有所限制。</p><figure class="highlight sql"><figcaption><span>添加列</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="built_in">CHAR</span>(<span class="number">20</span>); <span class="comment">--给表Vendors添加一列vend_phone,数据类型为Char（20） </span></span><br></pre></td></tr></table></figure><h3 id="3-添加自动增加的列"><a href="#3-添加自动增加的列" class="headerlink" title="3.添加自动增加的列"></a>3.添加自动增加的列</h3><p>MySQL提供SERIAL方法为表生成唯一值，例如</p><figure class="highlight sql"><figcaption><span>Mysql添加自动增加的列</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEST_INCREMENT</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">ID</span> <span class="built_in">SERIAL</span>,</span><br><span class="line">    TEST_NAME <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>SQL Server使用IDENTITY类型</p><figure class="highlight sql"><figcaption><span>SQL Server添加自动增加的列</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEST_INCREMENT</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TEST_NAME <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后就可以直接插入数据了</p><figure class="highlight sql"><figcaption><span>添加自动增加的列</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEST_INCREMENT(TEST_NAME)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'FRED'</span>),(<span class="string">'JOE'</span>),(<span class="string">'MIKE'</span>),(<span class="string">'TED'</span>);</span><br></pre></td></tr></table></figure><h3 id="4-从现有表新建另一个表"><a href="#4-从现有表新建另一个表" class="headerlink" title="4.从现有表新建另一个表"></a>4.从现有表新建另一个表</h3><p>SQL Server使用以下代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">INTO</span> PRODUCTS_TMP     <span class="comment">--要复制到的新表名</span></span><br><span class="line"><span class="keyword">FROM</span> PRODUCTS_TBL;        <span class="comment">--需要复制的表名</span></span><br></pre></td></tr></table></figure><p>MySQL和Oracle使用以下代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PRODUCTS_TMP <span class="keyword">AS</span><span class="comment">--要复制到的新表名</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PRODUCTS_TBL; <span class="comment">--需要复制的表名</span></span><br></pre></td></tr></table></figure><h3 id="5-删除表"><a href="#5-删除表" class="headerlink" title="5.删除表"></a>5.删除表</h3><p>MySQL和Oracle使用以下代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLE_NAME [ RESTRICT | <span class="keyword">CASCADE</span> ]</span><br></pre></td></tr></table></figure><p>如果使用了RESTRICT选项，并且表被视图或约束所引用，DROP就会返回一个错误。<br>而如果使用CASCADE选项，删除就会成功，而且表引用的约束和视图引用都会被删除</p><p>SQL Server使用以下代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> PRODUCTS_TMP;</span><br><span class="line"></span><br><span class="line">SQL Server不支持CASCADE选项，所以必须先删除所有引用关系所有对象，以避免系统中遗留无效对象</span><br></pre></td></tr></table></figure><h2 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h2><h3 id="1-主键约束"><a href="#1-主键约束" class="headerlink" title="1.主键约束"></a>1.主键约束</h3><p>把字段EMP_ID指定为表EMPLOYEE_TBL的主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMPLOYEE_TBL</span><br><span class="line">(</span><br><span class="line">EMP_ID<span class="built_in">VARCHAR</span>(<span class="number">9</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LAST_NAME<span class="built_in">VARCHAR</span>(<span class="number">15</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FIRST_NAME<span class="built_in">VARCHAR</span>(<span class="number">15</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">MIDDLE_NAME<span class="built_in">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">[ADDRESS]<span class="built_in">VARCHAR</span>(<span class="number">30</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">CITY<span class="built_in">VARCHAR</span>(<span class="number">15</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[STATE]<span class="built_in">CHAR</span>(<span class="number">2</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">ZIP<span class="built_in">INTEGER</span><span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PHONE<span class="built_in">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">PAGER<span class="built_in">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (EMP_ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以上为在创建表时设定EMP_ID为主键，还可以在创建完表后为表添加主键<br>以下命令为为表EMPLOYEE_TBL添加规则n1，设置EMP_ID为主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> EMPLOYEE_TBL</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> n1 primary <span class="keyword">key</span>(EMP_ID)</span><br></pre></td></tr></table></figure><h3 id="2-唯一性约束"><a href="#2-唯一性约束" class="headerlink" title="2.唯一性约束"></a>2.唯一性约束</h3><p>唯一性约束要求表中某个字段的值在每条记录里都是唯一的，这一点和主键类似。<br>为phone列添加唯一性约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMPLOYEE_TBL</span><br><span class="line">(</span><br><span class="line">EMP_ID<span class="built_in">VARCHAR</span>(<span class="number">9</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LAST_NAME<span class="built_in">VARCHAR</span>(<span class="number">15</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FIRST_NAME<span class="built_in">VARCHAR</span>(<span class="number">15</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PHONE<span class="built_in">CHAR</span>(<span class="number">10</span>),         <span class="keyword">UNIQUE</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (EMP_ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-外键约束"><a href="#3-外键约束" class="headerlink" title="3.外键约束"></a>3.外键约束</h3><p>外键是子表里的一个字段，引用父表里的主键，外键约束是确保表于表之间引用完整性的主要机制，一个被定义为外键的字段用于引用另一个表里的主键。<br>在这个范例中，EMP_ID字段被定义为表EMPLOYEE_PAY_TST的外键，它引用了表EMPLOYEE_TBL里的EMP_ID里的字段，这个外键确定了表EMPLOYEE_PAY_TST里每个EMP_ID都在EMPLOYEE_TBL里有对应的EMP_ID，这被称为父子关系，其中父表是EMPLOYEE_TBL，字表是EMPLOYEE_PAY_TST。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMPLOYEE_PAY_TST</span><br><span class="line">(</span><br><span class="line">EMP_ID <span class="built_in">CHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">POSITION</span> <span class="built_in">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">DATE_HIRE <span class="built_in">DATE</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> EMP_ID_FK FOREIGN <span class="keyword">KEY</span>(EMP_ID) <span class="keyword">REFERENCES</span> EMPLOYEE_TBL(EMP_ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>为了在字表里插入一个EMP_ID值，它首先要存在于父表的EMP_ID里，类似的，父表里删除一个EMP_ID，字表里的EMP_ID也必须完全删除<br>还可以通过以下方式设置外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> sc                <span class="comment">--设置要修改的表名</span></span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> fk_Id      <span class="comment">--设置外键名</span></span><br><span class="line">foreign <span class="keyword">key</span>(<span class="keyword">id</span>)            <span class="comment">--关联的列名</span></span><br><span class="line"><span class="keyword">references</span> student(<span class="keyword">id</span>)       <span class="comment">--关联的表名的表中的列名</span></span><br></pre></td></tr></table></figure><h3 id="4-检查约束"><a href="#4-检查约束" class="headerlink" title="4.检查约束"></a>4.检查约束</h3><p>检查约束用于检查输入到特定字段的数据的有效性，限制约束限制对特定输入数据的范围或格式，确保该列获得有效值，避免非法数据类型的产生与扩散。对同一列可以定义多个检查约束。但标识列。ROWGUIDCOL列或数据类型为TIMESTAMP的列不能定义检查约束，因为他们的约束由数据库系统字动添加。<br>基本格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">(</span><br><span class="line">列名 数据类型 其他约束 <span class="keyword">CONSTRAINT</span> 检查约束名 <span class="keyword">CHECK</span> (约束表达式)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>例如设置表XSSCORE中列SCORE的值大于0小于100</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> XSSCORE</span><br><span class="line">(</span><br><span class="line">SCORE <span class="built_in">DECIMAL</span>(<span class="number">4</span>,<span class="number">1</span>) <span class="literal">NULL</span> <span class="keyword">CHECK</span>(SCORE&gt;=<span class="number">0</span> <span class="keyword">AND</span> SCORE&lt;=<span class="number">100</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="5-默认值约束"><a href="#5-默认值约束" class="headerlink" title="5.默认值约束"></a>5.默认值约束</h3><p>基本格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">(</span><br><span class="line">列名 数据类型 其他约束 <span class="keyword">CONSTRAINT</span> 默认约束名 <span class="keyword">DEFAULT</span> (约束表达式)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>例如，设置表nation默认值为汉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> XSSCORE</span><br><span class="line">(</span><br><span class="line">NATION <span class="built_in">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> ‘汉’</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>还可以通过以下语句添加默认约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 默认约束名 <span class="keyword">DEFAULT</span> 默认表达式 <span class="keyword">FOR</span> 列名</span><br></pre></td></tr></table></figure><p>例如为表student列nation添加默认值汉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> DF_Student <span class="keyword">DEFAULT</span> <span class="string">'汉'</span> <span class="keyword">FOR</span> nation</span><br></pre></td></tr></table></figure><h3 id="6-默认值"><a href="#6-默认值" class="headerlink" title="6.默认值"></a>6.默认值</h3><p>默认值与默认约束类似，但是默认约束与默认值不能同时在某个列上使用<br>默认值可以绑定到多个不同的列上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFAULT</span> DF_NATION <span class="keyword">AS</span> <span class="string">'汉族'</span>     <span class="comment">--创建名为DF_NATION的约束</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">EXEC sp_bindefault DF_NATION ,<span class="string">'STUDENT.NATION'</span>  <span class="comment">--将约束绑定到表student中的列nation</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">删除默认值</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line">EXEC sp_unbindefault <span class="string">'STUDENT.NATION'</span> <span class="comment">--解除约束绑定</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DEFAULT</span> DF_NATION  <span class="comment">--删除默认值对象</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="7-规则"><a href="#7-规则" class="headerlink" title="7.规则"></a>7.规则</h3><p>设置score取值范围为[0,100]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line"><span class="comment">--创建规则，设置规则名为r1_score</span></span><br><span class="line"><span class="keyword">create</span> rule rl_score <span class="keyword">as</span> @score&gt;=<span class="number">0</span> <span class="keyword">and</span> @score&lt;=<span class="number">100</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="comment">--绑定规则</span></span><br><span class="line">exec sp_bindrule rl_score,<span class="string">'sc.score'</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查看sc中所有规则</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">sp_help sc</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>删除规则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line">exec sp_unbindrule 'sc.score'    <span class="comment">--解除绑定</span></span><br><span class="line">go</span><br><span class="line"><span class="keyword">drop</span> rule rl_score               <span class="comment">--删除规则</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>8.删除约束</p><p>删除表EMPLOYEES里的EMPlOVEES_PK约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> EMPLOYEES </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> EMPlOVEES_PK</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjjdc.com1.z0.glb.clouddn.com/blog/sql/network-3396348_1280.gif&quot; alt=&quot;数据库1&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt;&lt;strong&gt;本文为SQL学习记录笔记&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;第一篇记录笔记：创建数据库与创建表&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.buguagaoshu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="https://www.buguagaoshu.com/tags/SQL/"/>
    
      <category term="数据库" scheme="https://www.buguagaoshu.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>试试能不能放视频</title>
    <link href="https://www.buguagaoshu.com/2018/05/13/%E8%AF%95%E8%AF%95%E8%83%BD%E4%B8%8D%E8%83%BD%E6%94%BE%E8%A7%86%E9%A2%91/"/>
    <id>https://www.buguagaoshu.com/2018/05/13/试试能不能放视频/</id>
    <published>2018-05-13T14:46:44.000Z</published>
    <updated>2018-05-15T04:56:09.092Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjjdc.com1.z0.glb.clouddn.com/2017%E6%B5%81%E6%98%9F.jpg"></p><source src="http://7xjjdc.com1.z0.glb.clouddn.com/dizhizhuangbi1.mp4" type="video/mp4"><div class="note class_name"><p><strong>好吧，支持</strong> </p></div><a id="more"></a> <iframe height="498" width="510" src="http://player.youku.com/embed/XMzYwNTk2MTAyMA==" frameborder="0" 'allowfullscreen'=""></iframe><p><a href="http://7xjjdc.com1.z0.glb.clouddn.com/2017%E5%B9%B4%E3%81%B5%E3%81%9F%E3%81%94%E5%BA%A7%E6%B5%81%E6%98%9F%E7%BE%A4%20%E5%86%AC%E3%81%AE%E5%A4%A7%E4%B8%89%E8%A7%92%E3%81%A8%E6%B5%81%E3%82%8C%E6%98%9F.mp4" target="_blank" rel="noopener"> 视频地址 </a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjjdc.com1.z0.glb.clouddn.com/2017%E6%B5%81%E6%98%9F.jpg&quot;&gt;&lt;/p&gt;
&lt;source src=&quot;http://7xjjdc.com1.z0.glb.clouddn.com/dizhizhuangbi1.mp4&quot; type=&quot;video/mp4&quot;&gt;

&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt;&lt;strong&gt;好吧，支持&lt;/strong&gt; &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="学习记录" scheme="https://www.buguagaoshu.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="https://www.buguagaoshu.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://www.buguagaoshu.com/tags/GitHub/"/>
    
      <category term="博客" scheme="https://www.buguagaoshu.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>在用Hexo+GithubPages搭建博客时遇到的坑</title>
    <link href="https://www.buguagaoshu.com/2018/05/12/%E5%9C%A8%E7%94%A8Hexo-GithubPages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://www.buguagaoshu.com/2018/05/12/在用Hexo-GithubPages搭建博客时遇到的坑/</id>
    <published>2018-05-12T13:59:43.000Z</published>
    <updated>2018-05-13T14:35:28.778Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjjdc.com1.z0.glb.clouddn.com/Hexotite.png" alt="hexo+github"><br><div class="note class_name"><p><strong>开发时踩坑记录</strong> </p></div><br><a id="more"></a><br>这不是一篇教程，主要还是记录了我从0搭建过程中遇到的坑<br>另外网上教程那么多，我何必多此一举呢？</p><h2 id="开发这个博客时主要参考："><a href="#开发这个博客时主要参考：" class="headerlink" title="开发这个博客时主要参考："></a>开发这个博客时主要参考：</h2><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo中文文档</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next主题官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a><br><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">Hexo+Next主题美化</a></p><h2 id="解决Hexo-d命令报错"><a href="#解决Hexo-d命令报错" class="headerlink" title="解决Hexo d命令报错"></a>解决Hexo d命令报错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FATAL bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;https://github.com&apos;: Invalid argument</span><br><span class="line">Error: bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;https://github.com&apos;: Invalid argument</span><br></pre></td></tr></table></figure><p>或者显示没有发现git仓库，当时忘截图了，大概就是这个意思</p><p>将原来_config.yml中的deploy中repo格式改为下列形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> type: git</span><br><span class="line"> repo:git@github.com:your_github_user_name/your_github_user_name.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure><h3 id="重新生成ssh-key并添加到github"><a href="#重新生成ssh-key并添加到github" class="headerlink" title="重新生成ssh key并添加到github"></a>重新生成ssh key并添加到github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C 948805382@qq.com（换成你的邮箱地址）</span><br></pre></td></tr></table></figure><p>接着出现的一些步骤都可以回车跳过： </p><p>复制ssh密匙要将C:\Users\puzhiwei.ssh\id_rsa.pub中内容全部复制到GitHub</p><p>添加过程见参考资料3</p><h3 id="验证ssh-key："><a href="#验证ssh-key：" class="headerlink" title="验证ssh key："></a>验证ssh key：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>可能会先弹出让你输入yes的选项，输入yes后，出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi puzhiweizuishuai! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>即链接成功</p><h3 id="初始化本地git仓库"><a href="#初始化本地git仓库" class="headerlink" title="初始化本地git仓库"></a>初始化本地git仓库</h3><p>设置Git的user name和email：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;puzhiweizuishuai&quot;(换成你的用户名)</span><br><span class="line">$ git config --global user.email &quot;948805382@qq.com&quot;（换成你的邮箱地址）</span><br></pre></td></tr></table></figure></p><p>在本地的hexo init生成的文件夹中初始化git仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>做完以上这些步骤，说明你的仓库可以使用ssh方式来上传下载代码，而不需要输入用户名和密码了</p><h3 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean  //清除缓存文件db.json和已生成的静态文件public</span><br><span class="line">$ hexo g   //生成网站静态文件到默认设置的public文件夹</span><br><span class="line">$ hexo d   //部署网站到设定的仓库</span><br></pre></td></tr></table></figure><h2 id="菜单栏汉化"><a href="#菜单栏汉化" class="headerlink" title="菜单栏汉化"></a>菜单栏汉化</h2><p>第一次以为直接在hexo的配置文件里改就行，如将home改成主页，</p><p><img src="https://github.com/PuZhiweizuishuai/PzhiweiBlogPhoto/blob/master/%E8%8F%9C%E5%8D%95.JPG"></p><p>后来发现这样是错误的查找官方文档后将hoex配置文件里的language文件修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><p>但菜单栏还是不改变<br>最后查找资料发现要将主题中language文件修改为zh-CN<br>并将hoex修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><p>才能变成中文</p><h2 id="去掉低栏的logo和注意事项"><a href="#去掉低栏的logo和注意事项" class="headerlink" title="去掉低栏的logo和注意事项"></a>去掉低栏的logo和注意事项</h2><p>用Next主题搭建起来的博客，在底部会有一个特别烦人的官方logo<br><img src="http://7xjjdc.com1.z0.glb.clouddn.com/Nextlogo.JPG"></p><p>对于强迫症的我必须要改掉、改掉、改掉！</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.首先，找到 \themes\next\layout_partials\下面的footer.swig文件，打开会发现，如下图的语句：</p><p><img src="http://7xjjdc.com1.z0.glb.clouddn.com/%E4%BF%AE%E6%94%B9logo.jpg"></p><p>第一个框 是下面侧栏的“日期 XXX”如果想加东西，一定要在双大括号外面写。如：xxx,当然你要是想改彻底可以变量都删掉，看个人意愿。</p><p>第二个，是图一当中 “由Hexo驱动” 的Hexo链接，先给删掉防止跳转，如果想跳转当然也可以自己写地址，至于中文一会处理。注意删除的时候格式不能错，只把<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>标签这部分删除即可，留着两个单引号’’,否则会出错哦。</p><p>第三个框也是最后一个了，这个就是更改图一后半部分“主题-Next.XX”,这个比较爽直接将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;..&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>都删掉，同样中文“主题”一会处理，删掉之后在上一行 ‘-’后面可以随意加上你想显示的东西</p><p>2.接下来，处理剩余的中文信息。找到这个地方\themes\next\languages\ 下面的语言文件zh-CN.yml（这里以中文为例，有的习惯用英文的配置文件，道理一样，找对应位置即可）<br>这个是我修改后的：<br><img src="http://7xjjdc.com1.z0.glb.clouddn.com/logo%E4%BF%AE%E6%94%B9.JPG"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  powered: &quot; %s &quot;</span><br><span class="line">  theme: 吐槽</span><br></pre></td></tr></table></figure><h2 id="添加地址栏图片"><a href="#添加地址栏图片" class="headerlink" title="添加地址栏图片"></a>添加地址栏图片</h2><p>加入后就可以在浏览器的标签栏或者是收藏夹里面现实网站的缩略图标了。<br>在themes/next/的_config.yml中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Put your favicon.ico into `hexo-site/source/` directory.</span><br><span class="line"> favicon: /images/favicon.ico</span><br></pre></td></tr></table></figure><p>然后把图标放到根目录的source/images/下面。</p><h2 id="添加文章末尾的版权声明"><a href="#添加文章末尾的版权声明" class="headerlink" title="添加文章末尾的版权声明"></a>添加文章末尾的版权声明</h2><h3 id="在路径-themes-next-layout-macro中添加passage-end-tag-swig文件，其内容为："><a href="#在路径-themes-next-layout-macro中添加passage-end-tag-swig文件，其内容为：" class="headerlink" title="在路径\themes\next\layout_macro中添加passage-end-tag.swig文件，其内容为："></a>在路径\themes\next\layout_macro中添加passage-end-tag.swig文件，其内容为：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.passage_end_tag.enabled %&#125;+</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;div style=&quot;border: 1px solid black&quot; weight=&quot;50%&quot; height=&quot;50%&quot;&gt;</span><br><span class="line">&lt;div style=&quot;margin-left:10px&quot;&gt;</span><br><span class="line">&lt;span style=&quot;font-weight:blod&quot;&gt;版权声明&lt;/span&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;p style=&quot;font-size: 10px;line-height: 30px&quot;&gt;</span><br><span class="line"></span><br><span class="line">由</span><br><span class="line">&lt;a href=&quot;https://puzhiweizuishuai.github.io&quot; style=&quot;color:#258FC6&quot;&gt;</span><br><span class="line">史上最帅社会主义接班人</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">创作并维护的&lt;a href=&quot;https://puzhiweizuishuai.github.io&quot; style=&quot;color:#258FC6&quot;&gt;不挂英语&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">博客采用&lt;a href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; style=&quot;color:#258FC6&quot;&gt;</span><br><span class="line">创作共用保留署名-非商业-禁止演绎4.0国际许可证&lt;/a&gt;。&lt;br/&gt;</span><br><span class="line">本文首发于&lt;a href=&quot;https://puzhiweizuishuai.github.io/&quot; style=&quot;color:#258FC6&quot;&gt;不挂英语&lt;/a&gt; </span><br><span class="line">博客（ &lt;a href=&quot;https://puzhiweizuishuai.github.io/&quot; style=&quot;color:#258FC6&quot;&gt;https://puzhiweizuishuai.github.io/&lt;/a&gt; ），</span><br><span class="line">版权所有，侵权必究。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="修改-post-swig-文件"><a href="#修改-post-swig-文件" class="headerlink" title="修改 post.swig 文件"></a>修改 post.swig 文件</h3><p>在\themes\next\layout_macro\post.swig中，post-body之后，post-footer之前添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;+</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="在主题配置文件中添加字段"><a href="#在主题配置文件中添加字段" class="headerlink" title="在主题配置文件中添加字段"></a>在主题配置文件中添加字段</h3><p>在主题配置文件 _config.yml中添加以下字段开启此功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h2 id="换电脑了怎么办"><a href="#换电脑了怎么办" class="headerlink" title="换电脑了怎么办"></a>换电脑了怎么办</h2><p>我查找了网上很多教程，最后采用了新建一个仓库，保存原文件的做法<br>具体如下<br>由于在建立博客时账号设置什么的你应该已经搞定了，我就不多说了<br>接下来只必要的和可能遇到的错误</p><p>建立远程库<br>这个很简单，我也就不写了<br>直接从建立本地库开始</p><p>1.找到博客所在的文件夹</p><p>2.git init （在本机上新建一个git仓库）</p><p>3.git add -A (将文件的修改，文件的删除，文件的新建，添加到暂存区,即保存所有的修改)</p><p>4.git remote add origin xxxxxxxxx xxxxxx 就是你仓库的地址，具体的地址可以去Github上copy。关联远程仓库。</p><p>5.git commit -m “firstCommit” （提交文件，将暂存区的内容提交至Git本地数据库）</p><p>6.git pull –rebase origin master 更新远程更新到本地</p><p>7.git push origin master（git push -u origin master） 将本地repo于远程的origin的repo合并，第一次用-u，系统要求输入账号密码<br>此时可能会出现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">To github.com:PuZhiweizuishuai/puzhiweiblog.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &apos;git@github.com:PuZhiweizuishuai/puzhiweiblog.git&apos;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure><p>解决方案为：git push origin master -f，强行让本地分支覆盖远程分支。</p><p>8.后期执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .   // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span><br><span class="line"></span><br><span class="line">git commit -m &quot;first commit&quot; // 把添加的文件提交到版本库，并填写提交备注</span><br><span class="line"></span><br><span class="line">git push origin master  // 第一次推送后，直接使用该命令即可推送修改</span><br></pre></td></tr></table></figure></p><p>即可完成仓库更新</p><p>这样换电脑后直接克隆这个仓库里的文件，重新安装运行环境就行了</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>其他问题机本上参考官方文档就可以解决，我就不多写了，毕竟太懒，有什么问题可以在评论里回复我</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjjdc.com1.z0.glb.clouddn.com/Hexotite.png&quot; alt=&quot;hexo+github&quot;&gt;&lt;br&gt;&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt;&lt;strong&gt;开发时踩坑记录&lt;/strong&gt; &lt;/p&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习记录" scheme="https://www.buguagaoshu.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="https://www.buguagaoshu.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://www.buguagaoshu.com/tags/GitHub/"/>
    
      <category term="博客" scheme="https://www.buguagaoshu.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
